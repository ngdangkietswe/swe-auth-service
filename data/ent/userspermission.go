// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/ngdangkietswe/swe-auth-service/data/ent/userspermission"
)

// UsersPermission is the model entity for the UsersPermission schema.
type UsersPermission struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// PermissionID holds the value of the "permission_id" field.
	PermissionID uuid.UUID `json:"permission_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UsersPermissionQuery when eager-loading is set.
	Edges        UsersPermissionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UsersPermissionEdges holds the relations/edges for other nodes in the graph.
type UsersPermissionEdges struct {
	// User holds the value of the user edge.
	User []*User `json:"user,omitempty"`
	// Permission holds the value of the permission edge.
	Permission []*Permission `json:"permission,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading.
func (e UsersPermissionEdges) UserOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// PermissionOrErr returns the Permission value or an error if the edge
// was not loaded in eager-loading.
func (e UsersPermissionEdges) PermissionOrErr() ([]*Permission, error) {
	if e.loadedTypes[1] {
		return e.Permission, nil
	}
	return nil, &NotLoadedError{edge: "permission"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UsersPermission) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userspermission.FieldID, userspermission.FieldUserID, userspermission.FieldPermissionID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UsersPermission fields.
func (up *UsersPermission) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userspermission.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				up.ID = *value
			}
		case userspermission.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				up.UserID = *value
			}
		case userspermission.FieldPermissionID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field permission_id", values[i])
			} else if value != nil {
				up.PermissionID = *value
			}
		default:
			up.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UsersPermission.
// This includes values selected through modifiers, order, etc.
func (up *UsersPermission) Value(name string) (ent.Value, error) {
	return up.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UsersPermission entity.
func (up *UsersPermission) QueryUser() *UserQuery {
	return NewUsersPermissionClient(up.config).QueryUser(up)
}

// QueryPermission queries the "permission" edge of the UsersPermission entity.
func (up *UsersPermission) QueryPermission() *PermissionQuery {
	return NewUsersPermissionClient(up.config).QueryPermission(up)
}

// Update returns a builder for updating this UsersPermission.
// Note that you need to call UsersPermission.Unwrap() before calling this method if this UsersPermission
// was returned from a transaction, and the transaction was committed or rolled back.
func (up *UsersPermission) Update() *UsersPermissionUpdateOne {
	return NewUsersPermissionClient(up.config).UpdateOne(up)
}

// Unwrap unwraps the UsersPermission entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (up *UsersPermission) Unwrap() *UsersPermission {
	_tx, ok := up.config.driver.(*txDriver)
	if !ok {
		panic("ent: UsersPermission is not a transactional entity")
	}
	up.config.driver = _tx.drv
	return up
}

// String implements the fmt.Stringer.
func (up *UsersPermission) String() string {
	var builder strings.Builder
	builder.WriteString("UsersPermission(")
	builder.WriteString(fmt.Sprintf("id=%v, ", up.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", up.UserID))
	builder.WriteString(", ")
	builder.WriteString("permission_id=")
	builder.WriteString(fmt.Sprintf("%v", up.PermissionID))
	builder.WriteByte(')')
	return builder.String()
}

// UsersPermissions is a parsable slice of UsersPermission.
type UsersPermissions []*UsersPermission
