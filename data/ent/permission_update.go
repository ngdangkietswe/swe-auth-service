// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/ngdangkietswe/swe-auth-service/data/ent/action"
	"github.com/ngdangkietswe/swe-auth-service/data/ent/permission"
	"github.com/ngdangkietswe/swe-auth-service/data/ent/predicate"
	"github.com/ngdangkietswe/swe-auth-service/data/ent/resource"
	"github.com/ngdangkietswe/swe-auth-service/data/ent/userspermission"
)

// PermissionUpdate is the builder for updating Permission entities.
type PermissionUpdate struct {
	config
	hooks    []Hook
	mutation *PermissionMutation
}

// Where appends a list predicates to the PermissionUpdate builder.
func (pu *PermissionUpdate) Where(ps ...predicate.Permission) *PermissionUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetActionID sets the "action_id" field.
func (pu *PermissionUpdate) SetActionID(u uuid.UUID) *PermissionUpdate {
	pu.mutation.SetActionID(u)
	return pu
}

// SetNillableActionID sets the "action_id" field if the given value is not nil.
func (pu *PermissionUpdate) SetNillableActionID(u *uuid.UUID) *PermissionUpdate {
	if u != nil {
		pu.SetActionID(*u)
	}
	return pu
}

// SetResourceID sets the "resource_id" field.
func (pu *PermissionUpdate) SetResourceID(u uuid.UUID) *PermissionUpdate {
	pu.mutation.SetResourceID(u)
	return pu
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (pu *PermissionUpdate) SetNillableResourceID(u *uuid.UUID) *PermissionUpdate {
	if u != nil {
		pu.SetResourceID(*u)
	}
	return pu
}

// SetDescription sets the "description" field.
func (pu *PermissionUpdate) SetDescription(s string) *PermissionUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pu *PermissionUpdate) SetNillableDescription(s *string) *PermissionUpdate {
	if s != nil {
		pu.SetDescription(*s)
	}
	return pu
}

// ClearDescription clears the value of the "description" field.
func (pu *PermissionUpdate) ClearDescription() *PermissionUpdate {
	pu.mutation.ClearDescription()
	return pu
}

// SetAction sets the "action" edge to the Action entity.
func (pu *PermissionUpdate) SetAction(a *Action) *PermissionUpdate {
	return pu.SetActionID(a.ID)
}

// SetResource sets the "resource" edge to the Resource entity.
func (pu *PermissionUpdate) SetResource(r *Resource) *PermissionUpdate {
	return pu.SetResourceID(r.ID)
}

// AddUsersPermissionIDs adds the "users_permissions" edge to the UsersPermission entity by IDs.
func (pu *PermissionUpdate) AddUsersPermissionIDs(ids ...uuid.UUID) *PermissionUpdate {
	pu.mutation.AddUsersPermissionIDs(ids...)
	return pu
}

// AddUsersPermissions adds the "users_permissions" edges to the UsersPermission entity.
func (pu *PermissionUpdate) AddUsersPermissions(u ...*UsersPermission) *PermissionUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pu.AddUsersPermissionIDs(ids...)
}

// Mutation returns the PermissionMutation object of the builder.
func (pu *PermissionUpdate) Mutation() *PermissionMutation {
	return pu.mutation
}

// ClearAction clears the "action" edge to the Action entity.
func (pu *PermissionUpdate) ClearAction() *PermissionUpdate {
	pu.mutation.ClearAction()
	return pu
}

// ClearResource clears the "resource" edge to the Resource entity.
func (pu *PermissionUpdate) ClearResource() *PermissionUpdate {
	pu.mutation.ClearResource()
	return pu
}

// ClearUsersPermissions clears all "users_permissions" edges to the UsersPermission entity.
func (pu *PermissionUpdate) ClearUsersPermissions() *PermissionUpdate {
	pu.mutation.ClearUsersPermissions()
	return pu
}

// RemoveUsersPermissionIDs removes the "users_permissions" edge to UsersPermission entities by IDs.
func (pu *PermissionUpdate) RemoveUsersPermissionIDs(ids ...uuid.UUID) *PermissionUpdate {
	pu.mutation.RemoveUsersPermissionIDs(ids...)
	return pu
}

// RemoveUsersPermissions removes "users_permissions" edges to UsersPermission entities.
func (pu *PermissionUpdate) RemoveUsersPermissions(u ...*UsersPermission) *PermissionUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pu.RemoveUsersPermissionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PermissionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PermissionUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PermissionUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PermissionUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PermissionUpdate) check() error {
	if pu.mutation.ActionCleared() && len(pu.mutation.ActionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Permission.action"`)
	}
	if pu.mutation.ResourceCleared() && len(pu.mutation.ResourceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Permission.resource"`)
	}
	return nil
}

func (pu *PermissionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(permission.Table, permission.Columns, sqlgraph.NewFieldSpec(permission.FieldID, field.TypeUUID))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.SetField(permission.FieldDescription, field.TypeString, value)
	}
	if pu.mutation.DescriptionCleared() {
		_spec.ClearField(permission.FieldDescription, field.TypeString)
	}
	if pu.mutation.ActionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   permission.ActionTable,
			Columns: []string{permission.ActionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(action.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ActionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   permission.ActionTable,
			Columns: []string{permission.ActionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(action.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ResourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   permission.ResourceTable,
			Columns: []string{permission.ResourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ResourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   permission.ResourceTable,
			Columns: []string{permission.ResourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.UsersPermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   permission.UsersPermissionsTable,
			Columns: []string{permission.UsersPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userspermission.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedUsersPermissionsIDs(); len(nodes) > 0 && !pu.mutation.UsersPermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   permission.UsersPermissionsTable,
			Columns: []string{permission.UsersPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userspermission.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.UsersPermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   permission.UsersPermissionsTable,
			Columns: []string{permission.UsersPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userspermission.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{permission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PermissionUpdateOne is the builder for updating a single Permission entity.
type PermissionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PermissionMutation
}

// SetActionID sets the "action_id" field.
func (puo *PermissionUpdateOne) SetActionID(u uuid.UUID) *PermissionUpdateOne {
	puo.mutation.SetActionID(u)
	return puo
}

// SetNillableActionID sets the "action_id" field if the given value is not nil.
func (puo *PermissionUpdateOne) SetNillableActionID(u *uuid.UUID) *PermissionUpdateOne {
	if u != nil {
		puo.SetActionID(*u)
	}
	return puo
}

// SetResourceID sets the "resource_id" field.
func (puo *PermissionUpdateOne) SetResourceID(u uuid.UUID) *PermissionUpdateOne {
	puo.mutation.SetResourceID(u)
	return puo
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (puo *PermissionUpdateOne) SetNillableResourceID(u *uuid.UUID) *PermissionUpdateOne {
	if u != nil {
		puo.SetResourceID(*u)
	}
	return puo
}

// SetDescription sets the "description" field.
func (puo *PermissionUpdateOne) SetDescription(s string) *PermissionUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (puo *PermissionUpdateOne) SetNillableDescription(s *string) *PermissionUpdateOne {
	if s != nil {
		puo.SetDescription(*s)
	}
	return puo
}

// ClearDescription clears the value of the "description" field.
func (puo *PermissionUpdateOne) ClearDescription() *PermissionUpdateOne {
	puo.mutation.ClearDescription()
	return puo
}

// SetAction sets the "action" edge to the Action entity.
func (puo *PermissionUpdateOne) SetAction(a *Action) *PermissionUpdateOne {
	return puo.SetActionID(a.ID)
}

// SetResource sets the "resource" edge to the Resource entity.
func (puo *PermissionUpdateOne) SetResource(r *Resource) *PermissionUpdateOne {
	return puo.SetResourceID(r.ID)
}

// AddUsersPermissionIDs adds the "users_permissions" edge to the UsersPermission entity by IDs.
func (puo *PermissionUpdateOne) AddUsersPermissionIDs(ids ...uuid.UUID) *PermissionUpdateOne {
	puo.mutation.AddUsersPermissionIDs(ids...)
	return puo
}

// AddUsersPermissions adds the "users_permissions" edges to the UsersPermission entity.
func (puo *PermissionUpdateOne) AddUsersPermissions(u ...*UsersPermission) *PermissionUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return puo.AddUsersPermissionIDs(ids...)
}

// Mutation returns the PermissionMutation object of the builder.
func (puo *PermissionUpdateOne) Mutation() *PermissionMutation {
	return puo.mutation
}

// ClearAction clears the "action" edge to the Action entity.
func (puo *PermissionUpdateOne) ClearAction() *PermissionUpdateOne {
	puo.mutation.ClearAction()
	return puo
}

// ClearResource clears the "resource" edge to the Resource entity.
func (puo *PermissionUpdateOne) ClearResource() *PermissionUpdateOne {
	puo.mutation.ClearResource()
	return puo
}

// ClearUsersPermissions clears all "users_permissions" edges to the UsersPermission entity.
func (puo *PermissionUpdateOne) ClearUsersPermissions() *PermissionUpdateOne {
	puo.mutation.ClearUsersPermissions()
	return puo
}

// RemoveUsersPermissionIDs removes the "users_permissions" edge to UsersPermission entities by IDs.
func (puo *PermissionUpdateOne) RemoveUsersPermissionIDs(ids ...uuid.UUID) *PermissionUpdateOne {
	puo.mutation.RemoveUsersPermissionIDs(ids...)
	return puo
}

// RemoveUsersPermissions removes "users_permissions" edges to UsersPermission entities.
func (puo *PermissionUpdateOne) RemoveUsersPermissions(u ...*UsersPermission) *PermissionUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return puo.RemoveUsersPermissionIDs(ids...)
}

// Where appends a list predicates to the PermissionUpdate builder.
func (puo *PermissionUpdateOne) Where(ps ...predicate.Permission) *PermissionUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PermissionUpdateOne) Select(field string, fields ...string) *PermissionUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Permission entity.
func (puo *PermissionUpdateOne) Save(ctx context.Context) (*Permission, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PermissionUpdateOne) SaveX(ctx context.Context) *Permission {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PermissionUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PermissionUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PermissionUpdateOne) check() error {
	if puo.mutation.ActionCleared() && len(puo.mutation.ActionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Permission.action"`)
	}
	if puo.mutation.ResourceCleared() && len(puo.mutation.ResourceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Permission.resource"`)
	}
	return nil
}

func (puo *PermissionUpdateOne) sqlSave(ctx context.Context) (_node *Permission, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(permission.Table, permission.Columns, sqlgraph.NewFieldSpec(permission.FieldID, field.TypeUUID))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Permission.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, permission.FieldID)
		for _, f := range fields {
			if !permission.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != permission.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.SetField(permission.FieldDescription, field.TypeString, value)
	}
	if puo.mutation.DescriptionCleared() {
		_spec.ClearField(permission.FieldDescription, field.TypeString)
	}
	if puo.mutation.ActionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   permission.ActionTable,
			Columns: []string{permission.ActionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(action.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ActionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   permission.ActionTable,
			Columns: []string{permission.ActionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(action.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ResourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   permission.ResourceTable,
			Columns: []string{permission.ResourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ResourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   permission.ResourceTable,
			Columns: []string{permission.ResourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.UsersPermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   permission.UsersPermissionsTable,
			Columns: []string{permission.UsersPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userspermission.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedUsersPermissionsIDs(); len(nodes) > 0 && !puo.mutation.UsersPermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   permission.UsersPermissionsTable,
			Columns: []string{permission.UsersPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userspermission.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.UsersPermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   permission.UsersPermissionsTable,
			Columns: []string{permission.UsersPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userspermission.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Permission{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{permission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
