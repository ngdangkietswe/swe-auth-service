// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/ngdangkietswe/swe-auth-service/data/ent/permission"
	"github.com/ngdangkietswe/swe-auth-service/data/ent/predicate"
	"github.com/ngdangkietswe/swe-auth-service/data/ent/user"
	"github.com/ngdangkietswe/swe-auth-service/data/ent/userspermission"
)

// UsersPermissionUpdate is the builder for updating UsersPermission entities.
type UsersPermissionUpdate struct {
	config
	hooks    []Hook
	mutation *UsersPermissionMutation
}

// Where appends a list predicates to the UsersPermissionUpdate builder.
func (upu *UsersPermissionUpdate) Where(ps ...predicate.UsersPermission) *UsersPermissionUpdate {
	upu.mutation.Where(ps...)
	return upu
}

// SetUserID sets the "user_id" field.
func (upu *UsersPermissionUpdate) SetUserID(u uuid.UUID) *UsersPermissionUpdate {
	upu.mutation.SetUserID(u)
	return upu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (upu *UsersPermissionUpdate) SetNillableUserID(u *uuid.UUID) *UsersPermissionUpdate {
	if u != nil {
		upu.SetUserID(*u)
	}
	return upu
}

// SetPermissionID sets the "permission_id" field.
func (upu *UsersPermissionUpdate) SetPermissionID(u uuid.UUID) *UsersPermissionUpdate {
	upu.mutation.SetPermissionID(u)
	return upu
}

// SetNillablePermissionID sets the "permission_id" field if the given value is not nil.
func (upu *UsersPermissionUpdate) SetNillablePermissionID(u *uuid.UUID) *UsersPermissionUpdate {
	if u != nil {
		upu.SetPermissionID(*u)
	}
	return upu
}

// SetUser sets the "user" edge to the User entity.
func (upu *UsersPermissionUpdate) SetUser(u *User) *UsersPermissionUpdate {
	return upu.SetUserID(u.ID)
}

// SetPermission sets the "permission" edge to the Permission entity.
func (upu *UsersPermissionUpdate) SetPermission(p *Permission) *UsersPermissionUpdate {
	return upu.SetPermissionID(p.ID)
}

// Mutation returns the UsersPermissionMutation object of the builder.
func (upu *UsersPermissionUpdate) Mutation() *UsersPermissionMutation {
	return upu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (upu *UsersPermissionUpdate) ClearUser() *UsersPermissionUpdate {
	upu.mutation.ClearUser()
	return upu
}

// ClearPermission clears the "permission" edge to the Permission entity.
func (upu *UsersPermissionUpdate) ClearPermission() *UsersPermissionUpdate {
	upu.mutation.ClearPermission()
	return upu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (upu *UsersPermissionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, upu.sqlSave, upu.mutation, upu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (upu *UsersPermissionUpdate) SaveX(ctx context.Context) int {
	affected, err := upu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (upu *UsersPermissionUpdate) Exec(ctx context.Context) error {
	_, err := upu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upu *UsersPermissionUpdate) ExecX(ctx context.Context) {
	if err := upu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (upu *UsersPermissionUpdate) check() error {
	if upu.mutation.UserCleared() && len(upu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UsersPermission.user"`)
	}
	if upu.mutation.PermissionCleared() && len(upu.mutation.PermissionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UsersPermission.permission"`)
	}
	return nil
}

func (upu *UsersPermissionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := upu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(userspermission.Table, userspermission.Columns, sqlgraph.NewFieldSpec(userspermission.FieldID, field.TypeUUID))
	if ps := upu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if upu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userspermission.UserTable,
			Columns: []string{userspermission.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userspermission.UserTable,
			Columns: []string{userspermission.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if upu.mutation.PermissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userspermission.PermissionTable,
			Columns: []string{userspermission.PermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upu.mutation.PermissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userspermission.PermissionTable,
			Columns: []string{userspermission.PermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, upu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userspermission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	upu.mutation.done = true
	return n, nil
}

// UsersPermissionUpdateOne is the builder for updating a single UsersPermission entity.
type UsersPermissionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UsersPermissionMutation
}

// SetUserID sets the "user_id" field.
func (upuo *UsersPermissionUpdateOne) SetUserID(u uuid.UUID) *UsersPermissionUpdateOne {
	upuo.mutation.SetUserID(u)
	return upuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (upuo *UsersPermissionUpdateOne) SetNillableUserID(u *uuid.UUID) *UsersPermissionUpdateOne {
	if u != nil {
		upuo.SetUserID(*u)
	}
	return upuo
}

// SetPermissionID sets the "permission_id" field.
func (upuo *UsersPermissionUpdateOne) SetPermissionID(u uuid.UUID) *UsersPermissionUpdateOne {
	upuo.mutation.SetPermissionID(u)
	return upuo
}

// SetNillablePermissionID sets the "permission_id" field if the given value is not nil.
func (upuo *UsersPermissionUpdateOne) SetNillablePermissionID(u *uuid.UUID) *UsersPermissionUpdateOne {
	if u != nil {
		upuo.SetPermissionID(*u)
	}
	return upuo
}

// SetUser sets the "user" edge to the User entity.
func (upuo *UsersPermissionUpdateOne) SetUser(u *User) *UsersPermissionUpdateOne {
	return upuo.SetUserID(u.ID)
}

// SetPermission sets the "permission" edge to the Permission entity.
func (upuo *UsersPermissionUpdateOne) SetPermission(p *Permission) *UsersPermissionUpdateOne {
	return upuo.SetPermissionID(p.ID)
}

// Mutation returns the UsersPermissionMutation object of the builder.
func (upuo *UsersPermissionUpdateOne) Mutation() *UsersPermissionMutation {
	return upuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (upuo *UsersPermissionUpdateOne) ClearUser() *UsersPermissionUpdateOne {
	upuo.mutation.ClearUser()
	return upuo
}

// ClearPermission clears the "permission" edge to the Permission entity.
func (upuo *UsersPermissionUpdateOne) ClearPermission() *UsersPermissionUpdateOne {
	upuo.mutation.ClearPermission()
	return upuo
}

// Where appends a list predicates to the UsersPermissionUpdate builder.
func (upuo *UsersPermissionUpdateOne) Where(ps ...predicate.UsersPermission) *UsersPermissionUpdateOne {
	upuo.mutation.Where(ps...)
	return upuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (upuo *UsersPermissionUpdateOne) Select(field string, fields ...string) *UsersPermissionUpdateOne {
	upuo.fields = append([]string{field}, fields...)
	return upuo
}

// Save executes the query and returns the updated UsersPermission entity.
func (upuo *UsersPermissionUpdateOne) Save(ctx context.Context) (*UsersPermission, error) {
	return withHooks(ctx, upuo.sqlSave, upuo.mutation, upuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (upuo *UsersPermissionUpdateOne) SaveX(ctx context.Context) *UsersPermission {
	node, err := upuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (upuo *UsersPermissionUpdateOne) Exec(ctx context.Context) error {
	_, err := upuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upuo *UsersPermissionUpdateOne) ExecX(ctx context.Context) {
	if err := upuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (upuo *UsersPermissionUpdateOne) check() error {
	if upuo.mutation.UserCleared() && len(upuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UsersPermission.user"`)
	}
	if upuo.mutation.PermissionCleared() && len(upuo.mutation.PermissionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UsersPermission.permission"`)
	}
	return nil
}

func (upuo *UsersPermissionUpdateOne) sqlSave(ctx context.Context) (_node *UsersPermission, err error) {
	if err := upuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userspermission.Table, userspermission.Columns, sqlgraph.NewFieldSpec(userspermission.FieldID, field.TypeUUID))
	id, ok := upuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UsersPermission.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := upuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userspermission.FieldID)
		for _, f := range fields {
			if !userspermission.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userspermission.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := upuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if upuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userspermission.UserTable,
			Columns: []string{userspermission.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userspermission.UserTable,
			Columns: []string{userspermission.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if upuo.mutation.PermissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userspermission.PermissionTable,
			Columns: []string{userspermission.PermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upuo.mutation.PermissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userspermission.PermissionTable,
			Columns: []string{userspermission.PermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UsersPermission{config: upuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, upuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userspermission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	upuo.mutation.done = true
	return _node, nil
}
